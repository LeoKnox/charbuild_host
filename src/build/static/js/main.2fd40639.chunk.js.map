{"version":3,"sources":["pages/AboutPage.js","components/CharacterList.js","pages/character-content.js","pages/CharactersListPage.js","components/ActionsList.js","components/ToHitSection.js","components/AddActionForm.js","pages/NotFoundPage.js","pages/CharacterPage.js","pages/HomePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["AboutPage","react_default","a","createElement","Fragment","className","CharacterList","_ref","characters","map","char","key","react_router_dom","to","concat","name","class","content","CharactersListPage","components_CharacterList","characterContent","ActionsList","charAction","action","username","text","ToHitSection","characterName","hits","setCharacterInfo","attack","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","result","body","wrap","_context","prev","next","fetch","method","sent","json","stop","apply","this","arguments","onClick","AddActionForm","_useState","useState","_useState2","slicedToArray","setCharacterName","_useState3","_useState4","actionText","setActionText","addAction","JSON","stringify","headers","Content-Type","console","log","id","type","value","onChange","event","target","rows","cols","NotFoundPage","CharacterPage","match","params","character","find","otherCharacters","filter","characterInfo","useEffect","fetchData","components_ToHitSection","stat","components_ActionsList","components_AddActionForm","pages_NotFoundPage","HomePage","NavBar","App","src_NavBar","react_router","path","component","exact","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fd40639.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AboutPage = () => (\r\n            <>\r\n                <h1>This is about page</h1>\r\n                <p className=\"about\">\r\n                    This will one day be a turn based role-playing game using web technologies.\r\n                    Using React, Node, Express and MongoDB. Of course HTML and CSS. Also\r\n                    plans for creating a web based dungeon creation application.\r\n                </p>\r\n                <p className=\"about\">\r\n                    Inspired by my love of table top games and nethack. I like the turn based\r\n                    system to give more ability explore and socialize rather then run through\r\n                    an adventure as quickly as possible. Plus it should allow for the ability\r\n                    to inject creativity and uniqueness into the adventure.\r\n                </p>\r\n            </>\r\n);\r\n\r\nexport default AboutPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CharacterList = ({characters}) => (\r\n    <>\r\n        {characters.map((char, key) => (\r\n            <p key={key}>\r\n            <Link to={`/character/${char.name}`} key={key} className=\"characterList\">\r\n                {char.name} : {char.class}\r\n            </Link>\r\n            </p>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default CharacterList;","const characters = [\r\n    {\r\n        name: 'Aelien',\r\n        class: 'Wizard',\r\n        content: [\r\n            'ATK: 8',\r\n            'DEF: 10',\r\n            'MGC: 17',\r\n            'HP: 20'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Colette',\r\n        class: 'Rogue',\r\n        content: [\r\n            'atk:17',\r\n            'def:12',\r\n            'mgc:10',\r\n            'hp:25'\r\n        ]\r\n    }\r\n];\r\n\r\nexport default characters;","import React from 'react';\r\nimport CharacterList from '../components/CharacterList';\r\nimport characterContent from './character-content';\r\n\r\nconst CharactersListPage = () => {\r\n    return (\r\n        <>\r\n            <h1>Characters</h1>\r\n            <CharacterList characters={characterContent} /> \r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharactersListPage;","import React from 'react';\r\n\r\nconst ActionsList = ({ charAction }) => (\r\n    <>\r\n    <h3>Actions:</h3>\r\n    {charAction.map((action, key) => (\r\n        <div key={key}>\r\n            <h4>{action.username}</h4>\r\n            <p>{action.text}</p>\r\n        </div>\r\n    ))}\r\n    </>\r\n);\r\n\r\nexport default ActionsList","import React from 'react';\r\n\r\nconst ToHitSection = ({characterName, hits, setCharacterInfo}) => {\r\n    const attack = async () => {\r\n        const result = await fetch(`/api/characters/${characterName}/hits`, {\r\n            method: 'post',\r\n        });\r\n        const body = await result.json();\r\n        setCharacterInfo(body);\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => attack()} className=\"hitButton\">Hit</button>\r\n            <p>{characterName} has been hit {hits} times.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToHitSection;","import React, { useState } from 'react';\r\n\r\nconst AddActionForm = ({ characterName, setCharacterInfo }) => {\r\n    const [username, setCharacterName] = useState('');\r\n    const [actionText, setActionText] = useState('');\r\n\r\n    const addAction = async () => {\r\n        const result = await fetch(`/api/characters/${characterName}/charAction`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({ username, text: actionText }),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n            const body = await result.json();\r\n            console.log(\"!!\" + actionText);\r\n            setCharacterInfo(body);\r\n            setCharacterName('');\r\n            setActionText('');\r\n    }\r\n\r\n    return (\r\n    <div className=\"actionTime\">\r\n        <h3>Action Time It!</h3>\r\n        <label id=\"charName\">\r\n        <label className=\"actionTitle\">Name:</label>\r\n            <input \r\n                type=\"text\" value={username} \r\n                onChange={(event) => setCharacterName(event.target.value)}\r\n            /><br/>\r\n        </label>\r\n        <label id=\"charAction\">\r\n            <label className=\"actionTitle\">Action:</label>\r\n            <textarea rows=\"4\" cols=\"50\"\r\n                value={actionText}\r\n                onChange={(event) => setActionText(event.target.value)}\r\n            />\r\n        </label>\r\n            <button className=\"actionButton\" onClick={() => addAction()}>Add Action</button>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default AddActionForm;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found</h1>\r\n)\r\n\r\nexport default NotFoundPage;","import React, { useState, useEffect } from 'react';\r\nimport characterContent from './character-content';\r\nimport CharacterList from '../components/CharacterList';\r\nimport ActionsList from '../components/ActionsList';\r\nimport ToHitSection from '../components/ToHitSection';\r\nimport AddActionForm from '../components/AddActionForm';\r\nimport NotFoundPage from './NotFoundPage';\r\n\r\nconst CharacterPage = ( {match} ) => {\r\n    const name = match.params.name;\r\n    const character = characterContent.find(character => character.name === name);\r\n    const otherCharacters = characterContent.filter(character => character.name !== name);\r\n\r\n    const [characterInfo, setCharacterInfo] = useState({ hits: 0, charAction: [] });\r\n    console.log(characterInfo);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/api/characters/${name}`);\r\n            const body = await result.json();\r\n            setCharacterInfo(body);\r\n        }\r\n        fetchData();\r\n        }, [name]);\r\n\r\n    if (!character) return <NotFoundPage />\r\n\r\n    return (\r\n        <>\r\n            <h1>{character.name} </h1>\r\n            <ToHitSection characterName={name} hits={characterInfo.hits} setCharacterInfo={setCharacterInfo} />\r\n            <h3>Class: {character.class}</h3>\r\n            {character.content.map((stat, key) => (\r\n                <p key={key}>{stat}</p>\r\n            ))}\r\n            <ActionsList charAction={characterInfo.charAction} />\r\n            <AddActionForm characterName={name} setCharacterInfo={setCharacterInfo} />\r\n            <CharacterList characters={otherCharacters} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CharacterPage;","import React from 'react';\r\n\r\nconst HomePage = ()  => (\r\n    <>\r\n        <h1>work begins here</h1>\r\n        <p>Days of online adventure .... </p>\r\n    </>\r\n);\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li className=\"links\">\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"links\">\r\n                <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li className=\"links\">\r\n                <Link to=\"/characters-list\">Characters List</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport './App.css';\nimport AboutPage from './pages/AboutPage';\nimport CharactersListPage from './pages/CharactersListPage';\nimport CharacterPage from './pages/CharacterPage';\nimport HomePage from './pages/HomePage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport NavBar from './NavBar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/about\" component={AboutPage} />\n              <Route path=\"/characters-list\" component={CharactersListPage} />\n              <Route path=\"/character/:name\" component={CharacterPage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}